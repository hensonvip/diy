<?php/** * 会员模块 * @2016-11-02 Jam */if (!defined('IN_ECS')){    die('Hacking attempt');}class cls_user{    protected $_db                = null;    protected $_tb_user          = null;    protected static $_instance   = null;    public static $_errno = array(            1 => '操作成功',            2 => '参数错误',            3 => '会员不存在',    );    function __construct()    {        $this->_db = $GLOBALS['db'];        // $this->_cfg = $GLOBALS['cfg'];        $this->_tb_finds          = $GLOBALS['ecs']->table('finds');        $this->_tb_user          = $GLOBALS['ecs']->table('users');        $this->_tb_order_info    = $GLOBALS['ecs']->table('order_info');        $this->_tb_comment       = $GLOBALS['ecs']->table('comment');        $this->_tb_shop_grade    = $GLOBALS['ecs']->table('shop_grade');        $this->_tb_order_goods   = $GLOBALS['ecs']->table('order_goods');        $this->_tb_user_rank     = $GLOBALS['ecs']->table('user_rank');        $this->_tb_user_bonus    = $GLOBALS['ecs']->table('user_bonus');        $this->_tb_bonus_type    = $GLOBALS['ecs']->table('bonus_type');        $this->_tb_collect_goods = $GLOBALS['ecs']->table('collect_goods');        $this->_tb_goods         = $GLOBALS['ecs']->table('goods');        $this->_tb_member_price  = $GLOBALS['ecs']->table('member_price');        $this->_tb_account_log   = $GLOBALS['ecs']->table('account_log');        $this->_tb_user_address  = $GLOBALS['ecs']->table('user_address');        $this->_tb_region        = $GLOBALS['ecs']->table('region');        $this->_tb_member_message = $GLOBALS['ecs']->table('member_message');        $this->_tb_mem_mess_list = $GLOBALS['ecs']->table('mem_mess_list');        $this->_tb_bank_card = $GLOBALS['ecs']->table('bank_card');        $this->_tb_bank = $GLOBALS['ecs']->table('bank');        $this->_tb_user_account = $GLOBALS['ecs']->table('user_account');        $this->_tb_back_goods = $GLOBALS['ecs']->table('back_goods');        $this->_tb_back_order = $GLOBALS['ecs']->table('back_order');        $this->_tb_booking_goods = $GLOBALS['ecs']->table('booking_goods');        $this->_tb_feedback = $GLOBALS['ecs']->table('feedback');        $this->_tb_field = $GLOBALS['ecs']->table('field');        $this->_tb_finds_type = $GLOBALS['ecs']->table('finds_type');        $this->_tb_personal_letter = $GLOBALS['ecs']->table('personal_letter');        $this->_tb_personal_letter_temp = $GLOBALS['ecs']->table('personal_letter_temp');        $this->_tb_research = $GLOBALS['ecs']->table('research');        $this->_tb_user_inv_title = $GLOBALS['ecs']->table('user_inv_title');        $this->_tb_production_img = $GLOBALS['ecs']->table('production_img');        $this->_tb_product_collect = $GLOBALS['ecs']->table('product_collect');        $this->_tb_user_attention = $GLOBALS['ecs']->table('user_attention');        $this->_tb_diy = $GLOBALS['ecs']->table('diy');        $this->_tb_diy_comment = $GLOBALS['ecs']->table('diy_comment');        $this->_tb_report_comment = $GLOBALS['ecs']->table('report_comment');        $this->_now_time         = time();        $this->_mc_time          = 3600;        $this->_plan_time        = 3600*24*15;    }    public static function getInstance()    {        if (self::$_instance === null)        {            $instance = new self;            self::$_instance = $instance;        }        return self::$_instance ;    }    /**     * 获取用户中心默认页面所需的数据     *     * @access  public     * @param   int         $user_id            用户ID     * @param   string      $device             请求机型     * @return  array       $info               默认页面所需资料数组     */    function get_user_info($user_id,$device = 'pc')    {        require_once(ROOT_PATH . 'includes/lib_order.php');        $user_bonus = get_user_bonus($user_id,1);        $user_bonus = $user_bonus['bonus_count'];        $sql = "SELECT * FROM " .$this->_tb_user. " WHERE user_id = '$user_id'";        $row = $this->_db->getRow($sql);        $_SESSION['user_name'] = $row['user_name'];        $info = array();        $info['shop_name'] = $GLOBALS['_CFG']['shop_name'];//商城名称        $info['sex']  = !empty($row['sex']) ? $row['sex'] : 0;//性别        $info['headimg'] = !empty($row['headimg']) ? str_replace("./../","",$row['headimg']) : 'data/default/sex'.$info['sex'].'.png';//头像        $info['user_name']  = stripslashes($row['user_name']);//用户名        $info['real_name']  = stripslashes($row['real_name']);//真实姓名        $info['card']   = $row['card'];//身份证号码        $info['bonus_count'] = $user_bonus;//优惠券        $info['surplus']   = $row['user_money'];//余额        $info['avail_money']   = $row['user_money'] - $row['frozen_money'];//可提现余额        $info['integral']  = $row['pay_points'];//积分        $info['province']  = $row['province'];//省        $info['city']  = $row['city'];//市        $info['district']  = $row['district'];//区        $info['sh_province']  = $row['sh_province'];//学校 - 省        $info['sh_city']  = $row['sh_city'];//学校 - 市        $info['sh_school']  = $row['sh_school'];//学校 - 区        $info['birthday']  = $row['birthday'];//生日        $info['nickname']  = stripslashes($row['nickname']);//昵称        $info['fields']  = stripslashes($row['fields']) . ',';//领域        $info['fields_arr'] = explode(',', stripslashes($row['fields']));//领域        $info['weixin']  = $row['weixin'];//微信        $info['wx_open']  = $row['wx_open'];//是否公开微信        $info['qq']  = $row['qq'];//QQ        $info['qq_open']  = $row['qq_open'];//是否公开QQ        $info['profile']  = stripslashes($row['profile']);//个性签名        $info['weibo']  = stripslashes($row['weibo']);//微博        $info['facebook']  = stripslashes($row['facebook']);//facebook        $info['instagram']  = stripslashes($row['instagram']);//instagram        $info['website']  = stripslashes($row['website']);//个人网站        $info['is_renzheng']  = $row['is_renzheng'];//是否实名认证        $user_rank_arr = $this->get_user_rank($user_id);//会员等级信息        $info['rank_name'] = $user_rank_arr['rank_name'];        $rank_list = $this->get_rank_list();//等级列表        $info['rank_list'] = $rank_list;        //如果$_SESSION中时间无效说明用户是第一次登录。取当前登录时间。        $last_time = !isset($_SESSION['last_time']) ? $row['last_login'] : $_SESSION['last_time'];        if ($last_time == 0)        {            $_SESSION['last_time'] = $last_time = gmtime();        }        $info['last_time'] = local_date($GLOBALS['_CFG']['time_format'], $last_time);        $ex_where = " and user_id=$user_id";        //判断访问端口，返回不同字段        if(in_array($device,array('pc'))){        }        $info['email']  = $row['email'];//邮箱地址        $info['mask_email'] = mask_number($row['email']);//邮箱地址        $info['is_validate'] = ($GLOBALS['_CFG']['member_email_validate'] && !$row['is_validated'])?'0':'1';//邮箱已验证        $info['mobile_phone'] = $row['mobile_phone'];//手机号码        $info['mask_mobile_phone'] = mask_number($row['mobile_phone']);//手机号码        $info['validated'] = $row['validated'];//手机已验证        $info['status'] = $row['status'];//实名认证 0 未提交审核  1 审核通过 2审核中  3审核不通过        //未确认的订单数量        //$info['unconfirmed_count'] = (string)$this->_db->GetOne('SELECT COUNT(*)' . ' FROM ' . $this->_tb_order_info . " o WHERE 1 $ex_where " . order_query_sql('unconfirmed'));        //待评价的数量        $min_time = gmtime() - 86400 * $GLOBALS['_CFG']['comment_youxiaoqi'];        $info['evaluate_count'] = (string)$this->_db->GetOne("SELECT COUNT(*) AS num FROM " . $this->_tb_order_goods . " AS og LEFT JOIN " . $this->_tb_order_info . " AS o ON og.order_id=o.order_id WHERE o.user_id = '$user_id' AND og.is_back = 0 AND og.comment_state = 0 AND o.shipping_time_end > $min_time");        //待付款的订单数量        $info['pay_count'] = (string)$this->_db->GetOne('SELECT COUNT(*)' . ' FROM ' . $this->_tb_order_info . " o WHERE 1 $ex_where " . order_query_sql2(2,'o.'));        //待发货的订单数量        $info['ship_count'] = (string)$this->_db->GetOne('SELECT COUNT(*)' . ' FROM ' . $this->_tb_order_info . " o WHERE 1 $ex_where " . order_query_sql2(3,'o.'));        //待收货的订单数量        $info['shipped_count'] = (string)$this->_db->GetOne('SELECT COUNT(*)' . ' FROM ' . $this->_tb_order_info . " o WHERE 1 $ex_where " . order_query_sql2(4,'o.'));        //收藏数量        $sql = "SELECT COUNT(*) FROM " .$this->_tb_collect_goods.            " WHERE user_id = '" .$user_id. "'";        $info['collect_count'] = $this->_db->getOne($sql);        //消息数量        $sql = "SELECT count(*) FROM " . $this->_tb_mem_mess_list .            " WHERE mem_id = '$user_id' AND readed = 0 ";        $info['message_count'] = $this->_db->getOne($sql);        //购物车数量        $sql = "SELECT IFNULL(SUM(goods_number),0) AS number FROM " . $GLOBALS['ecs']->table('cart') .            " WHERE user_id = '$user_id' AND rec_type = 0 ";        $info['cart_count'] = $this->_db->getOne($sql);        return $info;    }    /**     * 更换头像     */    public function update_Headimg($user_id,$headimg){        include_once (ROOT_PATH . '/includes/cls_image.php');        $image = new cls_image($GLOBALS['_CFG']['bgcolor']);        $headimg_original = $image->upload_image($headimg, 'headimg/' . date('Ym'));        $thumb_path = DATA_DIR . '/headimg/' . date('Ym') . '/';        $headimg_thumb = $image->make_thumb($headimg_original, '120', '120', $thumb_path);        $headimg_thumb = $headimg_thumb ? $headimg_thumb : $headimg_original;        // 查询旧图片        $old_headimg = (string)$this->_db->getOne('SELECT headimg FROM '. $this->_tb_user . " WHERE user_id='$user_id'");        $sql = 'UPDATE ' . $this->_tb_user . " SET `headimg`='$headimg_thumb'  WHERE `user_id`='$user_id'";        if((string)$this->_db->query($sql)){            // 执行旧图片删除            @unlink(ROOT_PATH . $old_headimg);            return 1;        }else{            return 0;        }    }    /**     * 更换头像     */    public function save_Headimg($user_id, $base64_image_content){        //将base64编码转换为图片保存        if (preg_match('/^(data:\s*image\/(\w+);base64,)/', $base64_image_content, $result)) {            $type = $result[2];            $path = DATA_DIR . '/headimg/' . date('Ym') . '/';            $new_file = ROOT_PATH . $path;            if (!file_exists($new_file)) {                //检查是否有该文件夹，如果没有就创建，并给予最高权限                mkdir($new_file, 0777);            }            $img = time() . ".{$type}";            $new_file = $new_file . $img;            $headimg = $path . $img;            //将图片保存到指定的位置            if (file_put_contents($new_file, base64_decode(str_replace($result[1], '', $base64_image_content)))) {                // 查询旧图片                $old_headimg = (string)$this->_db->getOne('SELECT headimg FROM '. $this->_tb_user . " WHERE user_id='$user_id'");                $sql = 'UPDATE ' . $this->_tb_user . " SET `headimg`='$headimg'  WHERE `user_id`='$user_id'";                if((string)$this->_db->query($sql)){                    // 执行旧图片删除                    @unlink(ROOT_PATH . $old_headimg);                    return 1;                }else{                    return 0;                }            }else{                return 0;            }        }else{            return 0;        }    }    /**     * 实名认证     */    public function do_Renzheng($user_id, $card, $real_name, $mobile_phone){        // 调用第三方认证接口        if (authenticate($card, $real_name, $mobile_phone)) {            $sql = 'UPDATE ' . $this->_tb_user . " SET `real_name` = '$real_name', card = '$card', is_renzheng = 1 WHERE `user_id`='$user_id'";            $this->_db->query($sql);            return 1;        } else {            return 0;        }    }    /**     * 发送邮箱绑定邮件     */    public function send_Bind_Email($user_id, $email){        $tpl = get_mail_template('verify_mail');        $run = "0123456789abcdefghijklmnopqrstuvwxyz";        $hash = mc_random(16, $run);        $v_email = $_SERVER['REQUEST_SCHEME'].'://'.$_SERVER['SERVER_NAME'] . '/user/valid_email/hash/' . $hash;        /* 创建 Smarty 对象。*/        require(ROOT_PATH . 'includes/cls_template.php');        $smarty = new cls_template;        $smarty->assign('shop_name', $GLOBALS['_CFG']['shop_name']);        $smarty->assign('send_date', date($GLOBALS['_CFG']['time_format']));        $smarty->assign('user_name', '客户');        $smarty->assign('email', $v_email);        $content = $smarty->fetch('str:' . $tpl['template_content']);        $res = send_mail($GLOBALS['_CFG']['shop_name'], $email, $tpl['template_subject'], $content, $tpl['is_html']);        if($res == true)        {            $add_time = time();            $sql = "insert into " . $GLOBALS['ecs']->table('email') . "(`email`,`hash`,`add_time`,`user_id`) values('$email','$hash','$add_time','$user_id')";            $GLOBALS['db']->query($sql);            return true;        }        else        {            return false;        }    }    /**     * 发送验证邮件     */    public function send_Valid_Email($user_id, $email){        $tpl = get_mail_template('ch_email');        $run = "0123456789abcdefghijklmnopqrstuvwxyz";        $hash = mc_random(16, $run);        $v_email = $_SERVER['REQUEST_SCHEME'].'://'.$_SERVER['SERVER_NAME'] . '/user/valid_email2/hash/' . $hash;        /* 创建 Smarty 对象。*/        require(ROOT_PATH . 'includes/cls_template.php');        $smarty = new cls_template;        $smarty->assign('shop_name', $GLOBALS['_CFG']['shop_name']);        $smarty->assign('send_date', date($GLOBALS['_CFG']['time_format']));        $smarty->assign('user_name', '客户');        $smarty->assign('email', $v_email);        $content = $smarty->fetch('str:' . $tpl['template_content']);        $res = send_mail($GLOBALS['_CFG']['shop_name'], $email, $tpl['template_subject'], $content, $tpl['is_html']);        if($res == true)        {            $add_time = time();            $sql = "insert into " . $GLOBALS['ecs']->table('email') . "(`email`,`hash`,`add_time`,`user_id`) values('$email','$hash','$add_time','$user_id')";            $GLOBALS['db']->query($sql);            return true;        }        else        {            return false;        }    }    /**     * 发送验证邮件     */    public function send_Valid_Email2($user_id, $email){        $tpl = get_mail_template('ch_email');        $run = "0123456789abcdefghijklmnopqrstuvwxyz";        $hash = mc_random(16, $run);        $v_email = $_SERVER['REQUEST_SCHEME'].'://'.$_SERVER['SERVER_NAME'] . '/user/valid_email3/hash/' . $hash;        /* 创建 Smarty 对象。*/        require(ROOT_PATH . 'includes/cls_template.php');        $smarty = new cls_template;        $smarty->assign('shop_name', $GLOBALS['_CFG']['shop_name']);        $smarty->assign('send_date', date($GLOBALS['_CFG']['time_format']));        $smarty->assign('user_name', '客户');        $smarty->assign('email', $v_email);        $content = $smarty->fetch('str:' . $tpl['template_content']);        $res = send_mail($GLOBALS['_CFG']['shop_name'], $email, $tpl['template_subject'], $content, $tpl['is_html']);        if($res == true)        {            $add_time = time();            $sql = "insert into " . $GLOBALS['ecs']->table('email') . "(`email`,`hash`,`add_time`,`user_id`) values('$email','$hash','$add_time','$user_id')";            $GLOBALS['db']->query($sql);            return true;        }        else        {            return false;        }    }    /**     * 发送邮件验证码     */    public function send_Email_Code($user_id, $email){        /* 设置验证邮件模板所需要的内容信息 */        $template = get_mail_template('email_validate');        // 生成邮箱验证码        $email_code = rand_number(6);        /* 创建 Smarty 对象。*/        require(ROOT_PATH . 'includes/cls_template.php');        $smarty = new cls_template;        $smarty->assign('email_code', $email_code);        $smarty->assign('shop_name', $GLOBALS['_CFG']['shop_name']);        $smarty->assign('send_date', date($GLOBALS['_CFG']['date_format']));        $content = $smarty->fetch('str:' . $template['template_content']);        /* 发送激活验证邮件 */        $result = send_mail($email, $email, $template['template_subject'], $content, $template['is_html']);        if($result)        {            // 保存验证码到Session中            // $_SESSION[VT_EMAIL_VALIDATE] = $email;            // 保存验证记录            save_validate_record($email, $email_code, 'email_validate', time(), time() + 30 * 60);            return true;        }        else        {            return false;        }    }    /**     * 发送验证邮件     */    public function send_Edit_Email($user_id, $email){        $tpl = get_mail_template('ch_email');        $run = "0123456789abcdefghijklmnopqrstuvwxyz";        $hash = mc_random(16, $run);        $v_email = $_SERVER['REQUEST_SCHEME'].'://'.$_SERVER['SERVER_NAME'] . '/user/valid_edit_email/hash/' . $hash;        /* 创建 Smarty 对象。*/        require(ROOT_PATH . 'includes/cls_template.php');        $smarty = new cls_template;        $smarty->assign('shop_name', $GLOBALS['_CFG']['shop_name']);        $smarty->assign('send_date', date($GLOBALS['_CFG']['time_format']));        $smarty->assign('user_name', '客户');        $smarty->assign('email', $v_email);        $content = $smarty->fetch('str:' . $tpl['template_content']);        $res = send_mail($GLOBALS['_CFG']['shop_name'], $email, $tpl['template_subject'], $content, $tpl['is_html']);        if($res == true)        {            $add_time = time();            $sql = "insert into " . $GLOBALS['ecs']->table('email') . "(`email`,`hash`,`add_time`,`user_id`) values('$email','$hash','$add_time','$user_id')";            $GLOBALS['db']->query($sql);            return true;        }        else        {            return false;        }    }    /**     * 邮箱绑定     */    public function valid_Email($hash){        $sql = "select * from " . $GLOBALS['ecs']->table('email') . " where hash = '$hash'";        $row = $GLOBALS['db']->getRow($sql);        $now_time = time();        if($now_time - $row['add_time'] > 24 * 60 * 60)        {            $sql = "delete from " . $GLOBALS['ecs']->table('email') . " where hash = '$hash'";            $GLOBALS['db']->query($sql);            return false;        }        else        {            $sql = "select count(*) from " . $GLOBALS['ecs']->table('email') . " where hash = '$hash'";            $count = $GLOBALS['db']->getOne($sql);            if($count > 0)            {                $sql = "delete from " . $GLOBALS['ecs']->table('email') . " where hash = '$hash'";                $GLOBALS['db']->query($sql);                $sql = "update " . $GLOBALS['ecs']->table('users') . " set email = '$row[email]' where user_id = '$row[user_id]'";                $GLOBALS['db']->query($sql);                return true;            }        }    }    /**     * 更换头像Url     */    public function update_HeadUrl($user_id,$headimg){        if($headimg == ''){            return 0;        }        // 查询旧图片        $old_headimg = (string)$this->_db->getOne('SELECT headimg FROM '. $this->_tb_user . " WHERE user_id='$user_id'");        $sql = 'UPDATE ' . $this->_tb_user . " SET `headimg`='$headimg'  WHERE `user_id`='$user_id'";        if((string)$this->_db->query($sql)){            // 执行旧图片删除            @unlink(ROOT_PATH . $old_headimg);            return 1;        }else{            return 0;        }    }    /**     * 更新个人资料     */    public function update_UserInfo($user_id,$fields,$FILES = ''){        $data_str = '';        $old_headimg = '';        $old_face_card = '';        $old_back_card = '';        //文件上传处理        if(!empty($FILES)){            include_once (ROOT_PATH . '/includes/cls_image.php');            $image = new cls_image($GLOBALS['_CFG']['bgcolor']);            /*//头像            if(isset($FILES['headimg']) && $FILES['headimg']['size'] != 0)            {                $headimg_original = $image->upload_image($FILES['headimg'], 'headimg/' . date('Ym'));                $headimg_thumb_path = DATA_DIR . '/headimg/' . date('Ym') . '/';                $headimg_thumb = $image->make_thumb($headimg_original, '120', '120', $headimg_thumb_path);                $headimg_thumb = $headimg_thumb ? $headimg_thumb : $headimg_original;                // 查询旧图片                $old_headimg = (string)$this->_db->getOne('SELECT headimg FROM '. $this->_tb_user . " WHERE user_id='$user_id'");                $data_str .= "headimg ='$headimg_thumb',";            }*/            //身份证正面            if(isset($FILES['face_card']) && $FILES['face_card']['size'] != 0)            {                $face_card_original = $image->upload_image($FILES['face_card'], 'cardimg/' . date('Ym'));                // 查询旧图片                $old_face_card = (string)$this->_db->getOne('SELECT face_card FROM '. $this->_tb_user . " WHERE user_id='$user_id'");                $data_str .= "face_card ='$face_card_original',";            }            //身份证反面            if(isset($FILES['back_card']) && $FILES['back_card']['size'] != 0)            {                $back_card_original = $image->upload_image($FILES['back_card'], 'cardimg/' . date('Ym'));                // 查询旧图片                $old_back_card = (string)$this->_db->getOne('SELECT back_card FROM '. $this->_tb_user . " WHERE user_id='$user_id'");                $data_str .= "back_card ='$back_card_original',";            }        }        $data_str = $data_str.$fields;        $data_str = rtrim($data_str, ',');//清除字符串结尾空格符        $sql = 'UPDATE ' . $this->_tb_user . " SET $data_str WHERE `user_id`='$user_id'";        if((string)$this->_db->query($sql)){            // 执行旧图片删除            //if(!empty($old_headimg)){@unlink(ROOT_PATH . $old_headimg);}            if(!empty($old_face_card)){@unlink(ROOT_PATH . $old_face_card);}            if(!empty($old_back_card)){@unlink(ROOT_PATH . $old_back_card);}            return 1;        }else{            return 0;        }    }    /**     *  获取指定用户的收藏商品列表     *     * @access  public     * @param   int     $user_rank_info 用户等级信息     * @param   int     $num            列表最大数量     * @param   int     $start          列表起始位置     *     * @return  array   $arr     */    public function get_collection_goods($user_rank_info, $num = 10, $start = 0,$ext = '')    {        $sql = 'SELECT g.goods_id, g.goods_name, g.goods_thumb, g.market_price, g.shop_price AS org_price, '.            //"IFNULL(mp.user_price, g.shop_price * '$user_rank_info[discount]') AS shop_price, ".            'g.promote_price, g.promote_start_date,g.promote_end_date, c.rec_id, c.is_attention' .            ' FROM ' . $this->_tb_collect_goods . ' AS c' .            " LEFT JOIN " . $this->_tb_goods . " AS g ".            "ON g.goods_id = c.goods_id ".            " LEFT JOIN " . $this->_tb_member_price . " AS mp ".            "ON mp.goods_id = g.goods_id AND mp.user_rank = '$user_rank_info[user_rank]' ".            " WHERE c.user_id = '$user_rank_info[user_id]' $ext ORDER BY c.rec_id DESC";        $res = $this->_db -> selectLimit($sql, $num, $start);        $goods_list = array();        while ($row = $this->_db->fetchRow($res))        {            if ($row['promote_price'] > 0)            {                $promote_price = bargain_price($row['promote_price'], $row['promote_start_date'], $row['promote_end_date']);            }            else            {                $promote_price = 0;            }            $goods_list[$row['goods_id']]['rec_id']        = $row['rec_id'];            $goods_list[$row['goods_id']]['goods_id']      = $row['goods_id'];            $goods_list[$row['goods_id']]['goods_name']    = $row['goods_name'];            $goods_list[$row['goods_id']]['short_goods_name'] = sub_str($row['goods_name'], 20) ;            $goods_list[$row['goods_id']]['market_price']  = $row['market_price'];            $goods_list[$row['goods_id']]['shop_price']    = $row['org_price'];            $goods_list[$row['goods_id']]['discount_price'] = ($promote_price > 0) ? price_format($promote_price) : '';            $goods_list[$row['goods_id']]['thumb'] = get_image_path($row['goods_id'], $row['goods_thumb'],true);        }        sort($goods_list);        return $goods_list;    }    //获取收藏总数    public function get_collection_count($user_rank_info,$ext = '')    {        $sql = 'SELECT count(*)' .            ' FROM ' . $this->_tb_collect_goods . ' AS c' .            " LEFT JOIN " . $this->_tb_goods . " AS g ".            "ON g.goods_id = c.goods_id ".            " LEFT JOIN " . $this->_tb_member_price . " AS mp ".            "ON mp.goods_id = g.goods_id AND mp.user_rank = '$user_rank_info[user_rank]' ".            " WHERE c.user_id = '$user_rank_info[user_id]' $ext ORDER BY c.rec_id DESC";        $count = $GLOBALS['db']->getOne($sql);        return $count;    }    /**     *  获取指定用户的收藏店铺列表     *     * @access  public     * @param   int     $user_rank_info 用户等级信息     * @param   int     $num            列表最大数量     * @param   int     $start          列表起始位置     *     * @return  array   $arr     */    public function get_collection_shop($user_id, $num = 10, $start = 0)    {        $sql = 'SELECT sg.id,sg.supplierid,s.supplier_name,s.tel,s.company_name,s.rank_id ' .            ' FROM ' . $GLOBALS['ecs']->table('supplier_guanzhu') . ' AS sg' .            " LEFT JOIN " . $GLOBALS['ecs']->table('supplier') . " AS s ".                "ON sg.supplierid = s.supplier_id ".            " WHERE sg.userid = '$user_id' ORDER BY sg.addtime DESC";        $res = $GLOBALS['db'] -> selectLimit($sql, $num, $start);        $supp_list = array();        while ($row = $GLOBALS['db']->fetchRow($res))        {            $supp_list[$row['supplierid']]['id']        = $row['id'];            $supp_list[$row['supplierid']]['supplierid']        = $row['supplierid'];            $supp_list[$row['supplierid']]['supplier_name']        = $row['supplier_name'];            //$supp_list[$row['supplierid']]['tel']        = $row['tel'];            //$supp_list[$row['supplierid']]['company_name']        = $row['company_name'];            //好评            $sql3 = " SELECT c.comment_rank,s.send,s.shipping FROM ".$this->_tb_shop_grade ." AS s LEFT JOIN ". $this->_tb_comment ." AS c ON c.order_id = s.order_id LEFT JOIN ". $this->_tb_order_info ." AS o ON o.order_id = s.order_id WHERE s.is_comment >0 AND  s.server >0 AND o.supplier_id = " . $row['supplierid'];            $h = $GLOBALS['db']->getAll($sql3);            if(!empty($h)){                $count = 0;                foreach($h as $k=>$value)                {                    $count += array_sum($value);                }                $haoping = (($count/3)/count($h))/5*100;                $supp_list[$row['supplierid']]['haoping'] = round($haoping,1).'%';            }else{                $supp_list[$row['supplierid']]['haoping'] = '100%';            }            //关注人数            $sql = "SELECT count(*) FROM " . $GLOBALS['ecs']->table('supplier_guanzhu') ." WHERE supplierid = '$row[supplierid]' ";            $supp_list[$row['supplierid']]['fensi'] = $GLOBALS['db']->getOne($sql);            //$suppinfo = $GLOBALS['db'] -> query("select value,code from " . $GLOBALS['ecs']->table('supplier_shop_config') ." where supplier_id = ".$row['supplierid']." AND code in('shop_name','shop_logo','qq','ww')");            $suppinfo = $GLOBALS['db'] -> query("select value,code from " . $GLOBALS['ecs']->table('supplier_shop_config') ." where supplier_id = ".$row['supplierid']." AND code in('shop_logo')");            while ($r = $GLOBALS['db']->fetchRow($suppinfo)){                $supp_list[$row['supplierid']][$r['code']]        = $r['value'];            }        }        sort($supp_list);        return $supp_list;    }    //获取收藏总数    public function get_collection_shop_count($user_id)    {        $sql = 'SELECT count(*) ' .            ' FROM ' . $GLOBALS['ecs']->table('supplier_guanzhu') . ' AS sg' .            " LEFT JOIN " . $GLOBALS['ecs']->table('supplier') . " AS s ".                "ON sg.supplierid = s.supplier_id ".            " WHERE sg.userid = '$user_id' ORDER BY sg.addtime DESC";        $count = $GLOBALS['db']->getOne($sql);        return $count;    }    /**     * 删除收藏的店铺     *     * @access  public     * @param   int         $user_id            用户ID     * @param   array       $collection_id      收藏店铺ID     *     * @return  array       status               默认页面所需资料数组     */    function delete_shop_collection ($collection_id, $user_id = 0)    {        /* 获取记录条数 */        $sql = "SELECT userid FROM " . $GLOBALS['ecs']->table('supplier_guanzhu') . " WHERE id ".db_create_in($collection_id)." AND userid ='$user_id'";        $row = $this->_db->getOne($sql);        if($row)        {            return $this->_db->query('DELETE FROM ' . $GLOBALS['ecs']->table('supplier_guanzhu') . " WHERE id ".db_create_in($collection_id)." AND userid ='$user_id'");        }        else        {            return false;        }    }    /**     *  获取会员积分中心信息     *     * @access  public     * @param   int     $user_id        用户ID     * @param   int     $log_type       记录类型 0为全部 1为增加 2为减少     * @param   string  $account_type   消费类型 user_money 消费金额 pay_points 消费积分     * @param   int     $num            列表最大数量     * @param   int     $start          列表起始位置     *     * @return  array   $arr     */    function action_account_points ($user_id, $log_type = 0, $account_type = 'user_money', $num = 10, $start = 1)    {        $ext = '';        if($log_type == 1){            $ext = ' AND '.$account_type.' > 0';        }else if($log_type == 2){            $ext = ' AND '.$account_type.' < 0';        }        $ext .= " AND $account_type <> 0";        $_CFG = $GLOBALS['_CFG'];        $_LANG = $GLOBALS['_LANG'];        include_once (ROOT_PATH . 'includes/lib_clips.php');        /* 获取记录条数 */        $sql = "SELECT COUNT(*) FROM " . $this->_tb_account_log . " WHERE user_id = '$user_id'" . " AND $account_type <> 0 " . $ext;        $record_count = $this->_db->getOne($sql);        // 获取花费余额        $surplus_amount = $this->get_user_payed($user_id);        if(empty($surplus_amount))        {            $surplus_amount = 0;        }        /* /查看账户明细页面 获取会员用户的余额 jx 2015-1-1 */        $surplus_yue = $this->get_user_yue($user_id);        if(empty($surplus_yue))        {            $surplus_yue = 0;        }        // 获取余额记录        $account_log = array();        $sql_plus = "SELECT * FROM " . $this->_tb_account_log . " WHERE user_id = '$user_id'" . $ext . " ORDER BY log_id DESC";        $res_plus = $this->_db->selectLimit($sql_plus, $num, $start);        while($row_plus = $this->_db->fetchRow($res_plus))        {            $row_plus['change_time']  = local_date('Y-m-d H:i:s', $row_plus['change_time']);            $row_plus['type']         = $row_plus[$account_type] > 0 ? 1 : 0;            $row_plus['type_name']    = $row_plus[$account_type] > 0 ? $_LANG['account_inc'] : $_LANG['account_dec'];            $row_plus['user_money']   = (string)abs($row_plus['user_money']);            $row_plus['frozen_money'] = (string)abs($row_plus['frozen_money']);            $row_plus['rank_points']  = (string)abs($row_plus['rank_points']);            $row_plus['pay_points']   = (string)abs($row_plus['pay_points']);            $account_log[] = $row_plus;        }        return $account_log;    }    function action_account_points_count ($user_id, $log_type = 0, $account_type = 'pay_points')    {        $ext = '';        if($log_type == 1){            $ext = ' AND pay_points > 0';        }else if($log_type == 2){            $ext = ' AND pay_points < 0';        }        $_CFG = $GLOBALS['_CFG'];        $_LANG = $GLOBALS['_LANG'];        include_once (ROOT_PATH . 'includes/lib_clips.php');        /* 获取记录条数 */        $sql = "SELECT COUNT(*) FROM " . $this->_tb_account_log . " WHERE user_id = '$user_id'" . " AND $account_type <> 0 " . $ext;        $record_count = $this->_db->getOne($sql);        return $record_count;    }    /**     *  获取会员订单列表     *     * @access  public     * @param   int     $user_id        用户ID     * @param   string  $start_date     开始时间     * @param   string  $end_date       结束时间     * @param   int     $num            列表最大数量     * @param   int     $start          列表起始位置     *     * @return  array   $arr     */    public function order_list ($user_id, $start_date = '', $end_date = '', $num = 10, $start = 1)    {        $_CFG = $GLOBALS['_CFG'];        $_LANG = $GLOBALS['_LANG'];        $start_date_format = !empty($start_date)?strtotime($start_date):'';        $end_date_format   = !empty($end_date)?strtotime($end_date)+24*60*60:'';        include_once (ROOT_PATH . 'includes/lib_transaction.php');        include_once (ROOT_PATH . 'includes/cls_order.php');        include_once (ROOT_PATH . 'includes/lib_payment.php');        include_once (ROOT_PATH . 'includes/lib_order.php');        include_once (ROOT_PATH . 'includes/lib_clips.php');        $cls_order = new cls_order();        $ex_where = " and user_id=$user_id";        $ex_date_where = "";        if($start_date_format){            $ex_date_where = " AND add_time >= ".$start_date_format;        }        if($end_date_format){            $ex_date_where = " AND add_time <= ".$end_date_format;        }        if($start_date_format && $end_date_format){            $ex_date_where = " AND add_time >= ".$start_date_format." AND add_time <= ".$end_date_format;        }        if($ex_date_where){            $ex_where = $ex_where.$ex_date_where;        }        /* 已完成的订单 */        $order_count['finished'] = $this->_db->GetOne('SELECT COUNT(*) FROM ' . $this->_tb_order_info . " o WHERE 1 $ex_where " . order_query_sql('finished'));        $status['finished'] = CS_FINISHED;        /* 待发货的订单： */        $order_count['await_ship'] = $this->_db->GetOne('SELECT COUNT(*)' . ' FROM ' . $this->_tb_order_info . " o WHERE 1 $ex_where " . order_query_sql('await_ship'));        $status['await_ship'] = CS_AWAIT_SHIP;        /* 待付款的订单： */        $order_count['await_pay'] = $this->_db->GetOne('SELECT COUNT(*)' . ' FROM ' . $this->_tb_order_info . " o WHERE 1 $ex_where " . order_query_sql('await_pay'));        $status['await_pay'] = CS_AWAIT_PAY;        /* “未确认”的订单 */        $order_count['unconfirmed'] = $this->_db->GetOne('SELECT COUNT(*) FROM ' . $this->_tb_order_info . " o WHERE 1 $ex_where " . order_query_sql('unconfirmed'));        $status['unconfirmed'] = OS_UNCONFIRMED;        // $today_start = mktime(0,0,0,date('m'),date('d'),date('Y'));        $order_count['stats'] = $this->_db->getRow('SELECT COUNT(*) AS oCount, IFNULL(SUM(order_amount), 0) AS oAmount' . ' FROM ' . $this->_tb_order_info);        $composite_status = isset($_REQUEST['composite_status']) ? intval($_REQUEST['composite_status']) : - 1;        $where = '';        switch($composite_status)        {            case CS_AWAIT_PAY:                $where .= order_query_sql('await_pay');                break;            case CS_AWAIT_SHIP:                $where .= order_query_sql('await_ship');                break;            case CS_AWAIT_SHIP:                $where .= order_query_sql('await_ship');                break;            case CS_FINISHED:                $where .= order_query_sql('finished');                break;            default:                if($composite_status != - 1)                {                    $where .= " AND o.order_status = '$composite_status' ";                }        }        if($ex_date_where){            $where .= $ex_date_where;        }        $record_count = $this->_db->getOne("SELECT COUNT(*) FROM " . $this->_tb_order_info . " o WHERE user_id = '$user_id' {$where}");        // 未确认        if ($composite_status == OS_UNCONFIRMED)        {            $record_count = $order_count['unconfirmed'];        }        // 待付款        else if ($composite_status == CS_AWAIT_PAY)        {            $record_count = $order_count['await_pay'];        }        // 待发货        else if ($composite_status == CS_AWAIT_SHIP)        {            $record_count = $order_count['await_ship'];        }        // 已完成        else if ($composite_status == CS_FINISHED)        {            $record_count = $order_count['finished'];        }        $orders = $cls_order->get_user_orders_1($user_id, $num, $start, $where);        $result['record_count'] = $record_count;        $result['order_list']   = $orders;        return $result;    }    /**     *  获取会员订单列表 edit by qinglin 2017.09.18     *     * @access  public     * @param   int     $user_id        用户ID     * @param   string  $start_date     开始时间     * @param   string  $end_date       结束时间     * @param   int     $num            列表最大数量     * @param   int     $start          列表起始位置     *     * @return  array   $arr     */    public function order_list2 ($user_id, $start_date = '', $end_date = '', $num = 10, $start = 1,$status = 0,$extension_code = '')    {        $_CFG = $GLOBALS['_CFG'];        $_LANG = $GLOBALS['_LANG'];        $start_date_format = !empty($start_date)?strtotime($start_date):'';        $end_date_format   = !empty($end_date)?strtotime($end_date)+24*60*60:'';        include_once (ROOT_PATH . 'includes/lib_transaction.php');        include_once (ROOT_PATH . 'includes/cls_order.php');        include_once (ROOT_PATH . 'includes/lib_payment.php');        include_once (ROOT_PATH . 'includes/lib_order.php');        include_once (ROOT_PATH . 'includes/lib_clips.php');        $cls_order = new cls_order();        //返回所有订单        //$ex_where = " and extension_code = '$extension_code'";        if($extension_code){            $ex_where = " and extension_code = '$extension_code'";        }else{            $ex_where = "";        }        $ex_date_where = "";        if($start_date_format){            $ex_date_where = " AND add_time >= ".$start_date_format;        }        if($end_date_format){            $ex_date_where = " AND add_time <= ".$end_date_format;        }        if($start_date_format && $end_date_format){            $ex_date_where = " AND add_time >= ".$start_date_format." AND add_time <= ".$end_date_format;        }        if($ex_date_where){            $ex_where = $ex_where.$ex_date_where;        }        // $today_start = mktime(0,0,0,date('m'),date('d'),date('Y'));        //$order_count['stats'] = $this->_db->getRow('SELECT COUNT(*) AS oCount, IFNULL(SUM(order_amount), 0) AS oAmount' . ' FROM ' . $this->_tb_order_info);        $where = '';        $where .= order_query_sql2($status,'o.');        if($ex_date_where){            $where .= $ex_date_where;        }        $where .= " and is_show = 1 ";//添加前端是否删除字段（是否前端显示，0为不显示） 2017.09.26        $where .= $ex_where;        $record_count = $this->_db->GetOne('SELECT COUNT(*) FROM ' . $this->_tb_order_info . " o WHERE  user_id=$user_id  $where " . order_query_sql2($status,'o.'));        $orders = $cls_order->get_user_orders_2($user_id, $num, $start, $where);        $result['record_count'] = $record_count;        $result['order_list']   = $orders;//print_r($orders);die;        return $result;    }    //订单详情    function order_detail($user_id,$order_id){        include_once(ROOT_PATH . 'includes/lib_order.php');        $order = order_info($order_id);        //检查订单是否属于该用户        if ($user_id > 0 && $user_id != $order['user_id'])        {            //$GLOBALS['err']->add($GLOBALS['_LANG']['no_priv']);            return false;        }        /* 对发货号处理 */        if (!empty($order['invoice_no']))        {             $shipping_code = $GLOBALS['db']->GetOne("SELECT shipping_code FROM ".$GLOBALS['ecs']->table('shipping') ." WHERE shipping_id = '$order[shipping_id]'");             $plugin = ROOT_PATH.'includes/modules/shipping/'. $shipping_code. '.php';             if (file_exists($plugin))            {                  include_once($plugin);                  $shipping = new $shipping_code;                  $order['invoice_no_a'] = $shipping->query($order['invoice_no']);            }        }        /* 只有未确认才允许用户修改订单地址 */        if ($order['order_status'] == OS_UNCONFIRMED)        {            $order['allow_update_address'] = 1; //允许修改收货地址        }        else        {            $order['allow_update_address'] = 0;        }        /* 获取订单中实体商品数量 */        $order['exist_real_goods'] = exist_real_goods($order_id);        /* 如果是未付款状态，生成支付按钮 */        if ($order['pay_status'] == PS_UNPAYED &&            ($order['order_status'] == OS_UNCONFIRMED ||            $order['order_status'] == OS_CONFIRMED))        {            //2017.09.19 改为接口，不再生成支付按钮            /*             * 在线支付按钮             */            //支付方式信息       //      $payment_info = array();       //      $payment_info = payment_info($order['pay_id']);       //      //无效支付方式       //      if ($payment_info === false)       //      {       //          $order['pay_online'] = '';       //      }       //      else       //      {       //          //取得支付信息，生成支付代码       //          $payment = unserialize_config($payment_info['pay_config']);                // if($payment_info['pay_code'] == 'alipay_bank')                // {                //  $payment['www_ecshop68_com_alipay_bank'] = $order['defaultbank'];                // }       //          //获取需要支付的log_id       //          $order['log_id']    = get_paylog_id($order['order_id'], $pay_type = PAY_ORDER);       //          $order['user_name'] = $_SESSION['user_name'];       //          $order['pay_desc']  = $payment_info['pay_desc'];       //          /* 调用相应的支付方式文件 */       //          include_once(ROOT_PATH . 'includes/modules/payment/' . $payment_info['pay_code'] . '.php');       //          /* 取得在线支付方式的支付按钮 */       //          $pay_obj    = new $payment_info['pay_code'];       //          $order['pay_online'] = $pay_obj->get_code($order, $payment);       //      }        }        else        {            $order['pay_online'] = '';        }        /* 无配送时的处理 */        $order['shipping_id'] == -1 and $order['shipping_name'] = $GLOBALS['_LANG']['shipping_not_need'];        /* 其他信息初始化 */        $order['how_oos_name']     = $order['how_oos'];        $order['how_surplus_name'] = $order['how_surplus'];        /* 虚拟商品付款后处理 */        if ($order['pay_status'] != PS_UNPAYED)        {            /* 取得已发货的虚拟商品信息 */            $virtual_goods = get_virtual_goods($order_id, true);            $virtual_card = array();            foreach ($virtual_goods AS $code => $goods_list)            {                /* 只处理虚拟卡 */                if ($code == 'virtual_card')                {                    foreach ($goods_list as $goods)                    {                        if ($info = virtual_card_result($order['order_sn'], $goods))                        {                            $virtual_card[] = array('goods_id'=>$goods['goods_id'], 'goods_name'=>$goods['goods_name'], 'info'=>$info);                        }                    }                }                /* 处理超值礼包里面的虚拟卡 */                if ($code == 'package_buy')                {                    foreach ($goods_list as $goods)                    {                        $sql = 'SELECT g.goods_id FROM ' . $GLOBALS['ecs']->table('package_goods') . ' AS pg, ' . $GLOBALS['ecs']->table('goods') . ' AS g ' .                               "WHERE pg.goods_id = g.goods_id AND pg.package_id = '" . $goods['goods_id'] . "' AND extension_code = 'virtual_card'";                        $vcard_arr = $GLOBALS['db']->getAll($sql);                        foreach ($vcard_arr AS $val)                        {                            if ($info = virtual_card_result($order['order_sn'], $val))                            {                                $virtual_card[] = array('goods_id'=>$goods['goods_id'], 'goods_name'=>$goods['goods_name'], 'info'=>$info);                            }                        }                    }                }            }            $var_card = deleteRepeat($virtual_card);            $order['var_card'] = $var_card;            //$GLOBALS['smarty']->assign('virtual_card', $var_card);        }        /* 确认时间 支付时间 发货时间 */        /*if ($order['confirm_time'] > 0 && ($order['order_status'] == OS_CONFIRMED || $order['order_status'] == OS_SPLITED || $order['order_status'] == OS_SPLITING_PART))        {            $order['confirm_time'] = sprintf($GLOBALS['_LANG']['confirm_time'], local_date($GLOBALS['_CFG']['time_format'], $order['confirm_time']));        }        else        {            $order['confirm_time'] = '';        }        if ($order['pay_time'] > 0 && $order['pay_status'] != PS_UNPAYED)        {            $order['pay_time'] = sprintf($GLOBALS['_LANG']['pay_time'], local_date($GLOBALS['_CFG']['time_format'], $order['pay_time']));        }        else        {            $order['pay_time'] = '';        }        if ($order['shipping_time'] > 0 && in_array($order['shipping_status'], array(SS_SHIPPED, SS_RECEIVED)))        {            $order['shipping_time'] = sprintf($GLOBALS['_LANG']['shipping_time'], local_date($GLOBALS['_CFG']['time_format'], $order['shipping_time']));        }        else        {            $order['shipping_time'] = '';        }*/        /*if (($order['shipping_status'] == 0 || $order['shipping_status'] == 3 || $order['shipping_status'] == 5) && $order['pay_status'] == 2){            $order['back_can'] = 1;//可退款        }else{            $order['back_can'] = 0;//不可退款        }*/        //订单可操作的状态        /*$order['back_can'] = 0;//退款   0不可以   1可以        $order['can_do'] = CAN_NOT;//0 无操作        if ($order['order_status'] == OS_UNCONFIRMED){            // 未确认状态可以取消            $order['can_do'] = CAN_CANCEL;//2 可取消        }        if ($order['shipping_status'] == SS_SHIPPED){            $order['can_do'] = CAN_RECEIVED;//5 可确认收货        }        if ($order['pay_status'] == PS_UNPAYED){            // 未付款可支付            $order['can_do'] = CAN_PAY;//1 可支付        }        if (($order['shipping_status'] == 0 || $order['shipping_status'] == 3 || $order['shipping_status'] == 5) && $order['pay_status'] == 2){            $order['back_can'] = 1;//可退款        }        $back_info_num = "SELECT COUNT(*) FROM " . $this->_tb_back_order .            " WHERE order_id = " . $order_id . " AND status_back < 6";        if ($this->_db->getOne($back_info_num) > 0)        {            $order['back_can'] = 0;        }        if ($order['pay_status'] == 0)        {            $order['can_do'] = CAN_PAY;//1 可支付        }        if ($order['order_status'] == 3)        {            $order['can_do'] = CAN_NOT;//0 无操作        }        $status = returnOrderStatus($order['order_status'],$order['pay_status'],$order['shipping_status']);        if($status == 6){            $order['can_do'] = 7;//用户可删除订单（前端不显示）        }        $order['status'] = $status;*/        return $order;    }    //订单商品 add by qinglin 2017.09.20  从lib_order复制过来，可随便改动    function order_goods($order_id){        $sql = "SELECT  og.goods_id, og.product_id,og.goods_name, og.is_back, g.goods_thumb,og.exclusive, og.goods_number,og.comment_state,og.shaidan_state, " .            "og.goods_price, og.goods_attr, og.is_real, og.parent_id, og.is_gift, " .            "og.goods_price * og.goods_number AS subtotal, og.extension_code, og.order_id, package_attr_id  " .            "FROM " . $this->_tb_order_goods . "as og right join" . $this->_tb_goods .            "as g on og.goods_id = g.goods_id" .            " WHERE order_id = '$order_id'";        $res = $this->_db->query($sql);        while ($row = $this->_db->fetchRow($res))        {            //获取商品可操作的状态 add by qinglin 2017.09.25            $row['can_goods_do'] = 0;//定义            $info = $this->_db->getRow("SELECT order_status,pay_status,shipping_status FROM " . $this->_tb_order_info ." WHERE order_id = " . $order_id . " ");            if($info['shipping_status'] == 1){                $row['can_goods_do'] = CAN_RETURN;//4 可退货            }            $row['formated_goods_price'] = price_format($row['goods_price'], false);            $row['formated_subtotal'] = price_format($row['subtotal'], false);            $sql_back = "SELECT bg.*, bo.back_type,bo.order_id FROM " . $this->_tb_back_goods . " AS bg " . " LEFT JOIN " . $this->_tb_back_order . " AS bo " . " ON bg.back_id = bo.back_id " . " WHERE bo.order_id = " . $order_id . " AND bg.goods_id = " . $row['goods_id'] . " AND bg.product_id = " . $row['product_id'] . " AND bg.status_back < 6";            $back_info = $this->_db->getRow($sql_back);            $row['back_can'] =  count($back_info['order_id']) > 0 ? '0' : '1';            if(count($back_info['back_id']) > 0)            {                switch($back_info['status_back'])                {                    case '3':                        $sb = "已完成";                        break;                    case '5':                        $sb = "已申请";                        break;                    // case '6' : $sb = ""; break;                    // case '7' : $sb = ""; break;                    default:                        $sb = "正在";                        break;                }                switch($back_info['back_type'])                {                    case '1':                        $bt = "退货";                        break;                    case '3':                        $bt = "申请维修";                        break;                    case '4':                        $bt = "退款";                        break;                    default:                        break;                }                $shouhou = $sb . " " . $bt;            }            else            {                $shouhou = "";//正常            }            $row['shouhou'] = $shouhou;            if ($row['extension_code'] == 'package_buy')            {                //$row['package_goods_list'] = get_package_goods($row['goods_id'], $row['package_attr_id']);                $package_goods_list = get_package_goods($row['goods_id'], $row['package_attr_id']);                foreach ($package_goods_list as $k => $v) {                    $row['package_goods_list'][$k]['goods_id'] = $v['goods_id'];                    $row['package_goods_list'][$k]['goods_name'] = $v['goods_name'];                    $row['package_goods_list'][$k]['goods_number'] = $v['goods_number'];                    $row['package_goods_list'][$k]['goods_thumb'] = $v['goods_thumb'];                    $row['package_goods_list'][$k]['shop_price'] = $v['shop_price'];                }            }else{                $row['package_goods_list'] = new stdClass();            }            if($row['extension_code'] == 'virtual_good')            {                $virtual_goods_card = $GLOBALS['db']->getAll("select gc.card_sn,gc.end_date,buy_date from " . $GLOBALS['ecs']->table('virtual_goods_card') . " as gc join (select order_id,order_sn from " . $GLOBALS['ecs']->table('order_info') . " where order_id='$order_id') as oi on gc.order_sn = oi.order_sn");                $row['virtual_goods_card'] = $virtual_goods_card;                foreach($virtual_goods_card as $k => $v)                {                    $row['virtual_goods_card'][$k]['end_date'] = empty($v['end_date']) ? '' : local_date('Y-m-d', $v['end_date']);                    $row['virtual_goods_card'][$k]['buy_date'] = empty($v['buy_date']) ? '' : local_date('Y-m-d', $v['buy_date']);                }            }else{                $row['virtual_goods_card'] = new stdClass();            }            //手机专享价格  app            if($row['exclusive'] != '-1')            {                if($row['exclusive'] > $row['goods_price'])                {                    $row['subtotal'] = price_format($row['goods_price'] * $row['goods_number']);                }else                {                    $row['subtotal'] =  price_format($row['exclusive'] * $row['goods_number']);                }            }            $row['goods_attr'] = preg_replace("/\[.*\]/", '', $row['goods_attr']);//属性处理，去掉中括号及里面的内容。如：颜色:粉色[798] 尺码:S[798] 变为 颜色:粉色 尺码:S            $goods_list[] = $row;        }        //return $GLOBALS['db']->getAll($sql);        return isset($goods_list) ? $goods_list : array();    }    /**     * 删除订单（不显示）     */    function del_UserOrder($user_id,$order_id){        $sql = "SELECT order_status,shipping_status,pay_status FROM " . $this->_tb_order_info . " WHERE user_id='$user_id' AND order_id = '$order_id'";        $res = $this->_db->getRow($sql);        if(empty($res))        {            $result['status'] = 500;            $result['message'] = '不存在订单信息！';        }else{            if($res['order_status'] == 2 && $res['shipping_status'] == 0 && $res['pay_status'] ==0 ){                $sql = "UPDATE " .$this->_tb_order_info. " SET is_show = 0 WHERE user_id = '$user_id' AND order_id = '$order_id'";                $this->_db->query($sql);                $result['status'] = 200;                $result['message'] = '删除订单成功！';            }else{                $result['status'] = 500;                $result['message'] = '订单不是取消状态，不能删除！';            }        }        return $result;    }    /**     * 添加收藏的商品     *     * @access  public     * @param   int         $user_id            用户ID     * @param   array       $goods_id           商品ID     */    function add_collection ($goods_id, $user_id = 0 ,$str)    {        // 检查是否已经存在于用户的收藏夹        $sql = "SELECT COUNT(*) FROM " . $this->_tb_collect_goods . " WHERE user_id='$user_id' AND $str = '$goods_id'";        if($this->_db->GetOne($sql) > 0)        {            $this->_db->query('DELETE FROM ' . $this->_tb_collect_goods . " WHERE $str = '$goods_id' AND user_id ='$user_id'");            $result['status'] = 200;            $result['is_add'] = 0;            $result['message'] = '已取消收藏！';        }        else        {            $time = gmtime();            $sql = "INSERT INTO " . $this->_tb_collect_goods . " (user_id, $str, add_time)" . "VALUES ('$user_id', '$goods_id', '$time')";            if($this->_db->query($sql) === false)            {                $result['status'] = 500;                $result['is_add'] = 0;                $result['message'] = $this->_db->errorMsg();            }            else            {                $result['status'] = 200;                $result['is_add'] = 1;                $result['message'] = '收藏成功！';            }        }        return $result;    }    /**     * 删除收藏的商品     *     * @access  public     * @param   int         $user_id            用户ID     * @param   array       $collection_id      收藏ID     *     * @return  array       status               默认页面所需资料数组     */    function delete_collection ($collection_id, $user_id = 0)    {        /* 获取记录条数 */        $sql = "SELECT user_id FROM " . $this->_tb_collect_goods . " WHERE rec_id ".db_create_in($collection_id)." AND user_id ='$user_id'";        $row = $this->_db->getOne($sql);        if($row)        {            return $this->_db->query('DELETE FROM ' . $this->_tb_collect_goods . " WHERE rec_id ".db_create_in($collection_id)." AND user_id ='$user_id'");        }        else        {            return false;        }    }    /**     * 设置默认地址     *     * @access  public     * @param   int         $user_id            用户ID     * @param   int         $address_id         地址ID     *     * @return  array       status             返回成功或失败状态     */    function set_default_address ($user_id = 0, $address_id)    {        /* 获取记录条数 */        $sql = "SELECT address_id FROM " . $this->_tb_user_address . " WHERE address_id='$address_id' AND user_id ='$user_id'";        $row = $this->_db->getOne($sql);//echo $sql;        if($row)        {            $sql = "update ".$this->_tb_user." set address_id='$address_id' where user_id='{$user_id}'";            $GLOBALS['db']->query($sql);            return true;        }        else        {            return false;        }    }    /**     * 获得全部的地址信息并以ID赋键值     *     * @param $region_id_str array 键值ID字符串     * @return  array     */    public function get_regions_list($region_id_str = array())    {        $where = ' WHERE 1=1 ';        if($region_id_str){            $where .= ' AND region_id in (' . implode(',',$region_id_str) .')';        }        $sql = "SELECT region_id, region_name FROM " .$this->_tb_region . $where;        $region_list = $this->_db->getAll($sql);        $result = array();        foreach($region_list as $region_key => $region_val){            $result[$region_val['region_id']] = $region_val;        }        return $result;    }    /**     * 获取用户等级信息及折扣信息     *     * @access  public     * @param   int         $user_id            用户ID     *     * @return  array       $info               默认页面所需资料数组     */    /*public function get_user_rank($user_id)    {        if ($user_id <= 0)        {            $arr['rank_id'] = 0;            $arr['rank_name'] = '普通用户';        }        else        {            $infos = $this->_db->getRow("select * from ".$this->_tb_user." where user_id='$user_id'");            if ($infos['user_rank'] > 0)            {                $sql = "SELECT rank_id, rank_name, discount FROM ".$this->_tb_user_rank . " WHERE rank_id = '$infos[user_rank]'";            }            else            {                $sql = "SELECT rank_id, rank_name, discount, min_points FROM ".$this->_tb_user_rank .                    " WHERE min_points<= " . intval($infos['rank_points']) . " ORDER BY min_points DESC";            }            if ($row = $this->_db->getRow($sql))            {                $rank_name     = $row['rank_name'];            }            else            {                $rank_name = $GLOBALS['_LANG']['undifine_rank'];            }            // $arr['rank_id']   = $row['rank_id'];            $arr['user_rank']   = $row['rank_id'];            $arr['rank_name'] = $rank_name;            // $arr['discount']  = $row['discount']/100;  //这个坑！！            $arr['discount']  = 1;  //没有打折            $arr['user_id']   = $user_id;        }        return $arr;    }*/    /**     * 获取用户等级信息     */    public function get_user_rank($user_id)    {        if ($user_id <= 0)        {            $arr['rank_id'] = 0;            $arr['rank_name'] = 'LV1';        }        else        {            $infos = $this->_db->getRow("select * from ".$this->_tb_user." where user_id='$user_id'");            if ($infos['user_rank'] > 0)            {                $sql = "SELECT * FROM ".$this->_tb_user_rank . " WHERE rank_id = '$infos[user_rank]'";            }            else            {                $sql = "SELECT * FROM ".$this->_tb_user_rank .                    " WHERE min_sale_number <= " . intval($infos['rank_sale_number']) . " ORDER BY min_sale_number DESC";            }            if ($row = $this->_db->getRow($sql))            {                $rank_name = $row['rank_name'];            }            else            {                $rank_name = $GLOBALS['_LANG']['undifine_rank'];            }            $arr['rank_id'] = $row['rank_id'];            $arr['user_rank']   = $row['rank_id'];            $arr['rank_name'] = $rank_name;            $arr['sale_number'] = $row['sale_number'];//可销售数量            $arr['sale_price'] = $row['sale_price'];//售价            $arr['commision1'] = $row['sale_price'] * $row['commision_scale1'] / 100;//第1阶段佣金            $arr['commision2'] = $row['sale_price'] * $row['commision_scale2'] / 100;//第2阶段佣金            $arr['discount']  = 1;  //没有打折            $arr['user_id'] = $user_id;        }        return $arr;    }    /**     * 获取等级列表     */    public function get_rank_list()    {        $rank_list = $this->_db->getAll("SELECT * FROM " . $this->_tb_user_rank . " ORDER BY min_sale_number ASC");        return $rank_list;    }    /**     * 更新用户SESSION,COOKIE及登录时间、登录次数。     *     * @access  public     * @param  integral $user_id     * @return  void     */    public function update_user_info($user_id)    {        if (!$user_id)        {            return false;        }        /* 查询会员信息 */        $time = date('Y-m-d');        $sql = 'SELECT u.user_money,u.email,u.headimg, u.pay_points, u.user_rank, u.rank_points, '.            ' IFNULL(b.type_money, 0) AS user_bonus, u.last_login, u.last_ip'.            ' FROM ' .$this->_tb_user. ' AS u ' .            ' LEFT JOIN ' .$this->_tb_user_bonus. ' AS ub'.            ' ON ub.user_id = u.user_id AND ub.used_time = 0 ' .            ' LEFT JOIN ' .$this->_tb_bonus_type. ' AS b'.            " ON b.type_id = ub.bonus_type_id AND b.use_start_date <= '$time' AND b.use_end_date >= '$time' ".            " WHERE u.user_id = '$user_id'";        if ($row = $this->_db->getRow($sql))        {            /* 更新SESSION */            $_SESSION['last_time']   = $row['last_login'];            $_SESSION['last_ip']     = $row['last_ip'];            $_SESSION['login_fail']  = 0;            $_SESSION['email']       = $row['email'];            $_SESSION['user_rank']   = $row['user_rank'];            $_SESSION['headimg']     = $row['headimg'];            /*判断是否是特殊等级，可能后台把特殊会员组更改普通会员组*/            if($row['user_rank'] >0)            {                $sql="SELECT special_rank from ".$this->_tb_user_rank."where rank_id='$row[user_rank]'";                if($this->_db->getOne($sql)==='0' || $this->_db->getOne($sql)===null)                {                    $sql="update ".$this->_tb_user."set user_rank='0' where user_id='$user_id'";                    $GLOBALS['db']->query($sql);                    $row['user_rank']=0;                }            }            /* 取得用户等级和折扣 */            if ($row['user_rank'] == 0)            {                // 非特殊等级，根据等级积分计算用户等级（注意：不包括特殊等级）                $sql = 'SELECT rank_id, discount FROM ' . $this->_tb_user_rank . " WHERE special_rank = '0' AND min_points <= " . intval($row['rank_points']) . ' AND max_points > ' . intval($row['rank_points']);                if ($row = $GLOBALS['db']->getRow($sql))                {                    $_SESSION['user_rank'] = $row['rank_id'];                    $_SESSION['discount']  = $row['discount'] / 100.00;                    $sql="SELECT rank_name from ".$this->_tb_user_rank."where rank_id= ".$row['rank_id'];                    $_SESSION['user_rank_name']       = $this->_db->getOne($sql);                }                else                {                    $_SESSION['user_rank'] = 0;                    $_SESSION['discount']  = 1;                }            }            else            {                // 特殊等级                $sql = 'SELECT rank_id, discount FROM ' . $this->_tb_user_rank . " WHERE rank_id = '$row[user_rank]'";                if ($row = $this->_db->getRow($sql))                {                    $_SESSION['user_rank'] = $row['rank_id'];                    $_SESSION['discount']  = $row['discount'] / 100.00;                }                else                {                    $_SESSION['user_rank'] = 0;                    $_SESSION['discount']  = 1;                }            }        }        /* 更新登录时间，登录次数及登录ip */        $sql = "UPDATE " .$this->_tb_user. " SET".            " visit_count = visit_count + 1, ".            " last_ip = '" .real_ip(). "',".            " last_login = '" .gmtime(). "'".            " WHERE user_id = '" . $user_id . "'";        $this->_db->query($sql);    }    function get_user_payed($user_id)    {        $sql = "SELECT SUM(user_money) FROM " .$this->_tb_account_log.            " WHERE user_id = '$user_id' AND user_money < 0";        return abs($this->_db->getOne($sql));    }    function get_user_yue ($user_id)    {        $sql = "SELECT user_money FROM " . $this->_tb_user . "WHERE user_id = '$user_id'";        $res = $this->_db->getOne($sql);        return $res;    }    //  设置为app普通会员    function update_user_app($user_id)    {        $sql = 'UPDATE ' . $this->_tb_user . " SET `froms`='app',`froms`='app'  WHERE `user_id`='" . $user_id . "'";        $res = $this->_db->query($sql);        return $res;    }    //获取收货地址列表    function get_consignee_list($user_id, $num = 10, $start = 0)    {        $consignee = get_consignee($user_id);        $sql="SELECT * FROM " . $GLOBALS['ecs']->table('user_address') .                " WHERE user_id = '". $user_id ."' order by address_id ";        $res = $this->_db -> selectLimit($sql, $num, $start);        $consignee_list = array();        $have_def_addr=0;        while ($row = $this->_db->fetchRow($res))        {            $consignee_list[$row['address_id']] = $row;            $consignee_list[$row['address_id']]['address_short_name'] =  get_region_info($row['province']);            $consignee_list[$row['address_id']]['address_short_name'] .=  get_region_info($row['city']);            $consignee_list[$row['address_id']]['address_short_name'] .=  get_region_info($row['district']);            $consignee_list[$row['address_id']]['address_short_name'] .=  sub_str($row['address'],16);            if ($consignee['address_id'] == $row['address_id'])            {                $consignee_list[$row['address_id']]['def_addr'] =1;                $have_def_addr=1;            }else{                $consignee_list[$row['address_id']]['def_addr'] =0;            }        }        $result = array_values($consignee_list);//去掉键值        if ( count($result) && !$have_def_addr){            $result[0]['def_addr'] =1;        }        return $result;    }    //获取收货地址总数量    function get_consignee_count($user_id)    {        $consignee = get_consignee($user_id);        $sql="SELECT count(*) FROM " . $GLOBALS['ecs']->table('user_address') .                " WHERE user_id = '". $user_id ."'  ";        $count = $GLOBALS['db']->getOne($sql);        return $count;    }    /**     *  获取我的消息列表     *     * @access  public     * @param   int     $user_id        用户ID     * @param   int     $num            列表最大数量     * @param   int     $start          列表起始位置     *     * @return  array   $arr     */    public function get_MyNews($user_id, $msg_type = 0, $num = 10, $start = 0)    {        $where = '';        if ($msg_type > 0) {            $where = " AND mm.msg_type = '$msg_type' ";        }        $sql = "SELECT ml.l_id, ml.receive_time, mm.title, ml.readed, mm.msg_type FROM " .$this->_tb_mem_mess_list." as ml ".        " left join ".$this->_tb_member_message. " as mm on mm.m_id = ml.mess_id".        " WHERE ml.mem_id = " . $user_id . $where ." order by receive_time desc";        $res = $this->_db->selectLimit($sql, $num, $start);        $result = array();        while ($rows = $this->_db->fetchRow($res)){            $rows['receive_time'] = local_date($GLOBALS['_CFG']['time_format'], $rows['receive_time']);            $result[] = $rows;        }        return $result;    }    //获取我的消息总数    public function get_MyNews_count($user_id, $msg_type)    {        $where = '';        if ($msg_type > 0) {            $where = " AND mm.msg_type = '$msg_type' ";        }        $sql = "SELECT count(*) FROM " .$this->_tb_mem_mess_list." as ml ".        " left join ".$this->_tb_member_message. " as mm on mm.m_id = ml.mess_id".        " WHERE ml.mem_id = " . $user_id . $where;        $count = $this->_db->getOne($sql);        return $count;    }    //获取我的消息详情    public function get_MyNewsDetail($user_id,$l_id)    {        $sql = "SELECT ml.l_id, ml.receive_time, mm.title, mm.message FROM " .$this->_tb_mem_mess_list." as ml ".                " left join ".$this->_tb_member_message. " as mm on mm.m_id = ml.mess_id".                " WHERE ml.mem_id=".$user_id." and ml.l_id=".$l_id;        $record_details = $this->_db->getRow($sql);        // 更改此记录为已读，并更新已读时间        $l_id = $record_details['l_id'];        $sql = ' UPDATE '.$this->_tb_mem_mess_list.' SET read_time='.gmtime().', readed = 1 WHERE l_id='.$l_id;        $this->_db->query($sql);        $record_details['receive_time'] = local_date($GLOBALS['_CFG']['time_format'], $record_details['receive_time']);        return $record_details;    }    //我的消息 一键已读    public function get_MyNewsChange($user_id, $msg_type)    {        $sql = "UPDATE " . $this->_tb_mem_mess_list . " a LEFT JOIN " . $this->_tb_member_message . " b ON a.mess_id = b.m_id SET a.read_time=".gmtime().", a.readed = 1 WHERE mem_id = '$user_id' AND b.msg_type = '$msg_type'";        if($this->_db->query($sql)){            return 'true';        }else{            return 'false';        }    }    //我的消息 删除    public function del_MyNews($user_id, $id_str)    {        /* 获取记录条数 */        $sql = "SELECT l_id FROM " . $this->_tb_mem_mess_list . " WHERE l_id ".db_create_in($id_str)." AND mem_id ='$user_id'";        $row = $this->_db->getOne($sql);        if($row)        {            return $this->_db->query('DELETE FROM ' . $this->_tb_mem_mess_list . " WHERE l_id ".db_create_in($id_str)." AND mem_id ='$user_id'");        }        else        {            return false;        }    }    //我的消息 是否有未读消息    public function has_Unread_Message($user_id)    {        $sql = "SELECT COUNT(*) FROM " . $this->_tb_mem_mess_list . " a LEFT JOIN " . $this->_tb_member_message . " b ON a.mess_id = b.m_id WHERE a.mem_id = '$user_id' AND a.readed = 0 AND b.msg_type = 1";        $result['count1'] = $this->_db->getOne($sql);        $sql = "SELECT COUNT(*) FROM " . $this->_tb_mem_mess_list . " a LEFT JOIN " . $this->_tb_member_message . " b ON a.mess_id = b.m_id WHERE a.mem_id = '$user_id' AND a.readed = 0 AND b.msg_type = 2";        $result['count2'] = $this->_db->getOne($sql);        $sql = "SELECT COUNT(*) FROM " . $this->_tb_mem_mess_list . " a LEFT JOIN " . $this->_tb_member_message . " b ON a.mess_id = b.m_id WHERE a.mem_id = '$user_id' AND a.readed = 0 AND b.msg_type = 3";        $result['count3'] = $this->_db->getOne($sql);        return $result;    }    /**     * 我的私信聊天用户列表     */    public function get_Letter_Users($user_id)    {        $sql = "SELECT a.receive_user_id, b.user_name, b.nickname, b.headimg FROM " . $this->_tb_personal_letter_temp . " a LEFT JOIN " . $this->_tb_user . " b ON a.receive_user_id = b.user_id WHERE a.user_id = '$user_id' ORDER BY a.msg_time DESC";        $result = $this->_db->getAll($sql);        foreach ($result as $key => $value) {            // 获取跟某个用户的聊天记录            $status = $this->is_read($user_id, $value['receive_user_id']);            if ($status) {                $result[$key]['is_read'] = 1;            } else {                $result[$key]['is_read'] = 0;            }        }        return $result;    }    /**     * 获取跟某个用户的私信聊天消息     */    public function get_Letters($user_id, $receive_user_id)    {        $sql = "SELECT a.*, b.user_name, c.user_name AS receive_user_name, b.headimg, c.headimg AS receive_headimg FROM " . $this->_tb_personal_letter . " a LEFT JOIN " . $this->_tb_user . " b ON a.user_id = b.user_id LEFT JOIN " . $this->_tb_user . " c ON a.receive_user_id = c.user_id WHERE (a.user_id = '$user_id' AND a.receive_user_id = '$receive_user_id') OR (a.user_id = '$receive_user_id' AND a.receive_user_id = '$user_id') ORDER BY a.msg_time ASC";        $result = $this->_db->getAll($sql);        foreach ($result as $key => $value) {            $result[$key]['msg_time'] = date('Y-m-d H:i', $value['msg_time']);            $sql = "UPDATE " . $this->_tb_personal_letter . " SET is_read = 1 WHERE msg_id = '$value[msg_id]' AND user_id = '$receive_user_id' AND receive_user_id = '$user_id'";            $this->_db->query($sql);        }        return $result;    }    /**     * 判断跟某个用户聊天的消息是否已读     */    public function is_read($user_id, $receive_user_id)    {        $sql = "SELECT COUNT(*) FROM " . $this->_tb_personal_letter . " WHERE is_read = 0 AND user_id = '$receive_user_id' AND receive_user_id = '$user_id'";        $result = $this->_db->getOne($sql);        if ($result > 0) {            // 未读            return false;        } else {            // 已读            return true;        }    }    //发送私信    public function send_Letter($user_id, $receive_user_id, $msg_content)    {        $add_time = $this->_now_time;        $sql = "insert into " . $this->_tb_personal_letter . "(`user_id`,`receive_user_id`,`msg_status`,`msg_time`,`msg_content`) values('$user_id','$receive_user_id','0','$add_time','$msg_content')";        if((string)$this->_db->query($sql)){            $sql = "SELECT temp_id FROM " . $this->_tb_personal_letter_temp . " WHERE user_id = '$user_id' AND receive_user_id = '$receive_user_id'";            $temp = $this->_db->getOne($sql);            if (!$temp) {                $sql = "insert into " . $this->_tb_personal_letter_temp . "(`user_id`,`receive_user_id`,`msg_time`) values('$user_id','$receive_user_id','$add_time')";                $this->_db->query($sql);            } else {                // 更新时间                $sql = "update " . $this->_tb_personal_letter_temp . " set msg_time = '$add_time' where temp_id = '$temp'";                $this->_db->query($sql);            }            $sql = "SELECT COUNT(*) FROM " . $this->_tb_personal_letter_temp . " WHERE user_id = '$receive_user_id' AND receive_user_id = '$user_id'";            $temp2 = $this->_db->getOne($sql);            if (!$temp2) {                $sql = "insert into " . $this->_tb_personal_letter_temp . "(`user_id`,`receive_user_id`,`msg_time`) values('$receive_user_id','$user_id','$add_time')";                $this->_db->query($sql);            } else {                // 更新时间                $sql = "update " . $this->_tb_personal_letter_temp . " set msg_time = '$add_time' where temp_id = '$temp2'";                $this->_db->query($sql);            }            return true;        } else {            return false;        }    }    /**     * 删除私信左侧用户     */    public function remove_Letter_User($user_id, $receive_user_id)    {        return $this->_db->query('DELETE FROM ' . $this->_tb_personal_letter_temp . " WHERE user_id = '$user_id' AND receive_user_id = '$receive_user_id'");    }    /**     * 删除私信     */    public function remove_Letter($user_id, $receive_user_id, $msg_id)    {        if ($this->_db->query('DELETE FROM ' . $this->_tb_personal_letter . " WHERE msg_id = '$msg_id'")) {            // 判断是否还有私信，没有的话删除临时表关系            if (!$this->has_letter($user_id, $receive_user_id)) {                $this->_db->query('DELETE FROM ' . $this->_tb_personal_letter_temp . " WHERE (user_id = '$user_id' AND receive_user_id = '$receive_user_id') OR (user_id = '$receive_user_id' AND receive_user_id = '$user_id')");            }            return true;        } else {            return false;        }    }    /**     * 判断跟某个用户是否有聊天记录     */    public function has_letter($user_id, $receive_user_id)    {        $sql = "SELECT COUNT(*) FROM " . $this->_tb_personal_letter . " WHERE (user_id = '$user_id' AND receive_user_id = '$receive_user_id') OR (user_id = '$receive_user_id' AND receive_user_id = '$user_id')";        $count = $this->_db->getOne($sql);        if ($count > 0) {            return true;        } else {            return false;        }    }    /**     * 私信举报     */    public function do_Letter_Report($msg_id, $reason)    {        $sql = "SELECT msg_status FROM " . $this->_tb_personal_letter . " WHERE msg_id = '$msg_id'";        $msg_status = $this->_db->getOne($sql);        if ($msg_status > 0) {            return false;        }        $sql = "UPDATE " . $this->_tb_personal_letter . " SET msg_status = 1, report_reason = '$reason', report_time = '$this->_now_time' WHERE msg_id = '$msg_id'";        $res = $this->_db->query($sql);        return true;    }    /**     * 未读消息总数     */    public function get_Unread_Count($user_id)    {        $sql = "SELECT COUNT(*) FROM " . $this->_tb_personal_letter . " WHERE is_read = 0 AND receive_user_id = '$user_id'";        $count = intval($this->_db->getOne($sql));        $result['letter'] = $count;        $sql = "SELECT COUNT(*) FROM " . $this->_tb_mem_mess_list . " WHERE mem_id = '$user_id' AND readed = 0";        $result['message'] = $this->_db->getOne($sql);        $result['hudong'] = 10;        return $result;    }    //意见反馈    public function do_Research($user_id, $content)    {        $add_time = $this->_now_time;        $sql = "insert into " . $this->_tb_research . "(`user_id`,`content`,`status`,`add_time`) values('$user_id','$content','0','$add_time')";        if((string)$this->_db->query($sql)){            return true;        } else {            return false;        }    }    /**     *  获取银行列表     *     * @access  public     * @param   int     $num            列表最大数量     * @param   int     $start          列表起始位置     *     * @return  array   $arr     */    public function get_BankList($num = 10, $start = 0)    {        $sql = "SELECT id,bank_name FROM " .$this->_tb_bank." order by sort_order ASC,id asc";        $res = $this->_db -> selectLimit($sql, $num, $start);        $result = array();        while ($rows = $this->_db->fetchRow($res)){            $result[] = $rows;        }        return $result;    }    //获取银行卡总数    public function get_BankList_count()    {        $sql = "SELECT count(*) FROM " .$this->_tb_bank." ";        $count = $this->_db->getOne($sql);        return $count;    }    /**     *  获取银行卡列表     *     * @access  public     * @param   int     $user_id        用户ID     * @param   int     $num            列表最大数量     * @param   int     $start          列表起始位置     *     * @return  array   $arr     */    public function get_BankCardList($user_id, $num = 10, $start = 0)    {        $sql = "SELECT * FROM " .$this->_tb_bank_card." WHERE user_id = '$user_id' order by id asc";        $res = $this->_db -> selectLimit($sql, $num, $start);        $result = array();        while ($rows = $this->_db->fetchRow($res)){            //获取银行对应的图标            $bank_info = $this->_db->getRow("select bank_icon,bank_name,bank_color from " . $this->_tb_bank . " WHERE id='".$rows['bank_id']."'");            $rows['bank_icon'] = 'data/bankImg/'.$bank_info['bank_icon'];//银行图标            $rows['bank_name'] = $bank_info['bank_name'];//银行名称            $rows['bank_color'] = $bank_info['bank_color'];//背景色            $rows['card_number_short'] = substr($rows['card_number'],-4);//卡号最后4位数            $rows['mask_card_number'] = mask_number($rows['card_number']);            $rows['mask_card'] = mask_number($rows['card']);//身份证号码            unset($rows['bank_id']);            unset($rows['add_time']);            $result[] = $rows;        }        return $result;    }    //获取银行卡总数    public function get_BankCardList_count($user_id)    {        $sql = "SELECT count(*) FROM " .$this->_tb_bank_card." WHERE user_id = '$user_id' ";        $count = $this->_db->getOne($sql);        return $count;    }    //银行卡 - 添加    public function add_BankCard($user_id,$real_name,$bank_id,$card_number,$card_name,$card_type,$card_info,$bank_logo,$card)    {        $add_time = gmtime();        require_once('bankList.php');        if($this->check_bankCard($card_number) == 'false'){            return 3;        }        /*$card_info = bankInfo($card_number,$bankList);        $card_type = explode('-',$card_info);        $card_type = @$card_type[2];*/        $sql = "INSERT INTO " . $this->_tb_bank_card .            " (user_id, real_name, bank_id, card_number, card_name, card_info,card_type, add_time, bank_logo, card)".            " VALUES ('$user_id', '$real_name', '$bank_id', '$card_number', '$card_name', ".            " '$card_info','$card_type', '$add_time', '$bank_logo', '$card')";        $row = $this->_db->query($sql);        if($row){            return 1;        }else{            return 2;        }    }    //银行卡 - 修改    public function edit_BankCard($user_id,$real_name,$bank_id,$card_number,$card_name,$card_type,$card_info,$bank_logo,$card,$edit_id)    {        $add_time = gmtime();        if($this->check_bankCard($card_number) == 'false'){            return 3;        }        $sql = "UPDATE " . $this->_tb_bank_card . " SET user_id = '$user_id', real_name = '$real_name', bank_id = '$bank_id', card_number = '$card_number', 'card_name' = '$card_name', card_info = '$card_info', card_type = '$card_type', bank_logo = '$bank_logo', card = '$card' WHERE id = '$edit_id'";        $row = $this->_db->query($sql);        if($row){            return 1;        }else{            return 2;        }    }    //银行卡 - 设置默认    public function set_BankCardDefault($user_id,$id)    {        $this->_db->query("UPDATE " . $this->_tb_bank_card . " SET is_default = 0 WHERE user_id = '$user_id'");        return $this->_db->query("UPDATE " . $this->_tb_bank_card . " SET is_default = 1 WHERE user_id = '$user_id' and id = '$id'");    }    //银行卡 - 获取默认    public function get_BankCardDefault($user_id)    {        $sql = "SELECT * FROM " .$this->_tb_bank_card." WHERE user_id = '$user_id' and is_default=1 ";        $card_info = $this->_db->getRow($sql);        if($card_info){            $sql = "SELECT bank_icon,bank_name,bank_color FROM " .$this->_tb_bank." WHERE id = '".$card_info['bank_id']."' ";            $bank_info = $this->_db->getRow($sql);            $card_info['bank_icon'] = 'data/bankImg/'.$bank_info['bank_icon'];//银行图标            $card_info['bank_name'] = $bank_info['bank_name'];//银行名称            $card_info['bank_color'] = $bank_info['bank_color'];//背景色            $card_info['card_number_short'] = substr($card_info['card_number'],-4);//卡号最后4位数            unset($card_info['bank_id']);            unset($card_info['add_time']);            return $card_info;        }else{            return false;        }    }    //银行卡 - 删除    public function del_BankCard($user_id,$id_str)    {        return $this->_db->query('DELETE FROM ' . $this->_tb_bank_card . " WHERE id ".db_create_in($id_str)." AND user_id ='$user_id'");    }    //检测银行卡号是否正确    public function check_bankCard($card_number){        $arr_no = str_split($card_number);        $last_n = $arr_no[count($arr_no)-1];        krsort($arr_no);        $i = 1;        $total = 0;        foreach ($arr_no as $n){            if($i%2==0){                $ix = $n*2;                if($ix>=10){                    $nx = 1 + ($ix % 10);                    $total += $nx;                }else{                    $total += $ix;                }            }else{                $total += $n;            }            $i++;        }        $total -= $last_n;        $x = 10 - ($total % 10);        if($x == $last_n){            return 'true';        }else{            return 'false';        }    }    /**     *  获取申请提现列表     *     * @access  public     * @param   int     $user_id        用户ID     * @param   int     $num            列表最大数量     * @param   int     $start          列表起始位置     *     * @return  array   $arr     */    public function get_ApplyDepositList($user_id, $num = 10, $start = 0)    {        $account_log = array();        $sql = 'SELECT * FROM ' .$this->_tb_user_account.               " WHERE user_id = '$user_id'" .               " AND process_type " . db_create_in(array(SURPLUS_SAVE, SURPLUS_RETURN)) .               " ORDER BY add_time DESC";        $res = $this->_db->selectLimit($sql, $num, $start);        if ($res)        {            while ($rows = $this->_db->fetchRow($res))            {                $rows['add_time']         = local_date('Y-m-d H:i:s', $rows['add_time']);                if (empty($rows['paid_time'])) {                    $rows['paid_time'] = '-';                } else {                    $rows['paid_time']    = local_date('Y-m-d H:i:s', $rows['paid_time']);                }                $rows['admin_note']       = nl2br(htmlspecialchars($rows['admin_note']));                $rows['user_note']        = nl2br(htmlspecialchars($rows['user_note']));                $rows['pay_status']       = ($rows['is_paid'] == 0) ? 0 : 1;                $rows['pay_status_name']  = ($rows['is_paid'] == 0) ? $GLOBALS['_LANG']['un_confirm'] : $GLOBALS['_LANG']['is_confirm'];                $rows['amount']           = abs($rows['amount']);                $rows['amount_format']    = price_format(abs($rows['amount']), false);                $rows['poundage_format']    = price_format(abs($rows['poundage']), false);                /* 会员的操作类型： 冲值，提现 */                if ($rows['process_type'] == 0)                {                    $rows['type'] = 0;                    $rows['type_name'] = '充值';                }                else                {                    $rows['type'] = 1;                    $rows['type_name'] = '提现';                }                // /* 支付方式的ID */                // $sql = 'SELECT pay_id FROM ' .$GLOBALS['ecs']->table('payment').                //        " WHERE pay_name = '$rows[payment]' AND enabled = 1";                // $pid = $GLOBALS['db']->getOne($sql);                // /* 如果是预付款而且还没有付款, 允许付款 */                // if (($rows['is_paid'] == 0) && ($rows['process_type'] == 0))                // {                //     $rows['handle'] = '<a href="user.php?act=pay&id='.$rows['id'].'&pid='.$pid.'">'.$GLOBALS['_LANG']['pay'].'</a>';                //     $rows['pay_id'] = $pid;                // }                unset($rows['admin_user']);                unset($rows['process_type']);                unset($rows['is_paid']);                unset($rows['bank_card_id']);                unset($rows['payment']);                $account_log[] = $rows;            }            return $account_log;        }        else        {             return false;        }    }    //获取申请提现总数    public function get_ApplyDepositList_count($user_id)    {        $sql = "SELECT COUNT(*) FROM " . $this->_tb_user_account . " WHERE user_id = '$user_id'" . " AND process_type " . db_create_in(array(SURPLUS_SAVE, SURPLUS_RETURN));        $count = $this->_db->getOne($sql);        return $count;    }    //申请提现    public function apply_Deposit($user_id,$bank_card_id,$amount,$user_note)    {        include_once (ROOT_PATH . 'includes/lib_clips.php');        $_POST['surplus_type'] = 1;//提现        /* 变量初始化 */        $surplus = array(            'user_id' => $user_id, 'process_type' => 1, 'payment_id' => 0, 'user_note' => $user_note, 'amount' => $amount        );        /* 退款申请的处理 */        // 插入会员账目明细        $amount = '-' . $amount;        $surplus['payment'] = '';        $surplus['rec_id'] = insert_user_account($surplus, $amount);        //更新银行卡 add by qinglin 2017.09.13        if($bank_card_id){            $this->_db->query("UPDATE " . $this->_tb_user_account . " SET bank_card_id = '".$bank_card_id."' WHERE id = '".$surplus['rec_id']."'");        }        /* 如果成功提交 */        if($surplus['rec_id'] > 0)        {            return true;        }        else        {            return false;        }    }    //申请提现 - 删除    public function del_ApplyDeposit($user_id,$id_str)    {        return $this->_db->query('DELETE FROM ' . $this->_tb_user_account . " WHERE id ".db_create_in($id_str)." AND user_id ='$user_id'");    }    //到货通知    public function arrival_Notice($user_id,$goods_id,$number = 0,$tel = 0,$email = 0){        $b_goods = $this->_db->getOne("SELECT user_id,goods_id FROM " . $this->_tb_booking_goods . " WHERE user_id='$user_id' AND is_dispose=0 AND goods_id = '$goods_id'");        if($b_goods){            $result['status'] = 500;            $result['message'] = "您已经登记过了";            return $result;        }        if(! preg_match('#^13[\d]{9}$|^14[5,7]{1}\d{8}$|^15[^4]{1}\d{8}$|^17[0,6,7,8]{1}\d{8}$|^18[\d]{9}$#', $tel))        {            $result['status'] = 500;            $result['message'] = "手机格式不正确";            return $result;        }        if(!empty($email)){            if(! preg_match("/^([0-9A-Za-z\\-_\\.]+)@([0-9a-z]+\\.[a-z]{2,3}(\\.[a-z]{2})?)$/i", $email))            {                $result['status'] = 500;                $result['message'] = "邮箱格式不正确";                return $result;            }        }        $user_name = $this->_db->getOne("SELECT user_name FROM " . $this->_tb_user . " WHERE user_id = '$user_id'");        $time = gmtime();        $sql = "INSERT INTO " . $this->_tb_booking_goods . " (user_id,email,tel,goods_id,goods_number,booking_time,link_man) VALUES ('$user_id','$email','$tel','$goods_id','$number','$time','$user_name')";        if($this->_db->query($sql))        {            $result['status'] = 200;            $result['message'] = "登记成功";        }        else        {            $result['status'] = 500;            $result['message'] = "登记失败";        }        return $result;    }    //我的留言（留言、投诉、询问、售后、求购）    public function save_advise($user_id,$msg_type,$msg_content,$msg_title,$order_id){        $user_data = $this->_db->getRow("SELECT user_name,email FROM " . $this->_tb_user . " WHERE user_id = '$user_id'");        $time = gmtime();        $sql = "INSERT INTO " . $this->_tb_feedback . " (parent_id, user_id, user_name, user_email, msg_title, msg_type, msg_status,  msg_content, msg_time, order_id) VALUES ('0','$user_id','$user_data[user_name]','$user_data[email]','$msg_title','$msg_type','1','$msg_content','$time','$order_id')";        if($this->_db->query($sql))        {            $result['status'] = 200;            $result['message'] = "留言成功";        }        else        {            $result['status'] = 500;            $result['message'] = "留言失败";        }        return $result;    }    /**     * 保存发票抬头     */    public function save_Inv_Title($user_id = 0, $inv_title){        $sql = "SELECT COUNT(*) FROM " . $this->_tb_user_inv_title . " WHERE user_id = '$user_id' AND inv_title = '$inv_title'";        $exists = $this->_db->getOne($sql);        if (empty($exists)) {            $add_time = gmtime();            $sql = "INSERT INTO " . $this->_tb_user_inv_title . " (user_id, inv_title, add_time)".                    "VALUES ('$user_id', '$inv_title', '$add_time')";            return $this->_db->query($sql);        } else {            return true;        }    }    /**     * 删除发票抬头     */    public function del_Inv_Title($user_id = 0, $inv_title){        $sql = "DELETE FROM " . $this->_tb_user_inv_title . " WHERE user_id = '$user_id' AND inv_title = '$inv_title'";        $return = $this->_db->query($sql);    }    /**     * 用户发票公司抬头     */    public function get_Inv_Title($user_id)    {        $sql = " SELECT * FROM " . $this->_tb_user_inv_title . " WHERE user_id = '$user_id' ORDER BY add_time ASC";        $inv_title_list = $this->_db->getAll($sql);        return $inv_title_list;    }    /**     * 获取发现列表     * @param  $field     * @param  $condition     * @return array     */    public function getFinds($field='*', $condition='',$num=11,$page=1)    {        $sql = "SELECT ". $field ." FROM ". $this->_tb_finds;        if (!empty($condition)) {             $where = " WHERE $condition";             $sql .= $where;         }        $res = $this->_db->selectLimit($sql, $num, ($page - 1) * $num);        $arr = array();        while ($row = $this->_db->fetchRow($res))        {            $arr[] = $row;        }        return $arr;    }    /**     * 获取领域列表     */    public function get_fields()    {        $sql = " SELECT field_pin FROM " . $this->_tb_field . " GROUP BY field_pin ORDER BY field_pin ASC";        $field_pin = $this->_db->getAll($sql);        foreach ($field_pin as $key => $value) {            $sql = " SELECT field_id, field_name FROM " . $this->_tb_field . " WHERE is_show = 1 AND field_pin = '$value[field_pin]' ORDER BY field_pin ASC, sort_order ASC";            $fields = $this->_db->getAll($sql);            $field_pin[$key]['fields'] = $fields;        }        return $field_pin;    }    /**     * 获取常用领域列表     */    public function get_common_fields()    {        $sql = " SELECT field_id, field_name FROM " . $this->_tb_field . " WHERE is_common = 1 ORDER BY field_pin ASC, sort_order ASC";        $common_fields = $this->_db->getAll($sql);        return $common_fields;    }    /**     * 获取‘发现’领域列表     */    public function get_finds_fields(){        $sql = " SELECT en_name FROM " . $this->_tb_finds_type . " GROUP BY en_name ORDER BY en_name ASC";        $field_pin = $this->_db->getAll($sql);        foreach ($field_pin as $key => $value) {            $sql = " SELECT `type_id`, `name` FROM " . $this->_tb_finds_type . " WHERE  en_name = '$value[en_name]' ORDER BY en_name ASC";            $fields = $this->_db->getAll($sql);            $field_pin[$key]['fields'] = $fields;        }        return $field_pin;    }    /**     * 获取‘发现’常用领域列表     */    public function get_finds_common_fields(){        $sql = " SELECT type_id, name FROM " . $this->_tb_finds_type . " WHERE is_common = 1 ORDER BY en_name ASC";        $common_fields = $this->_db->getAll($sql);        return $common_fields;    }    /**     * 设计作品删除     * @param user_id 用户id     * @param find_id 作品id     */    public function del_finds($user_id,$find_id){        if(empty($user_id)&&empty($find_id)){            $result['status'] = 500;            $result['message'] = "参数错误";        }else{            $sql = " DELETE FROM ".$this->_tb_finds." WHERE find_id = $find_id AND user_id = $user_id";            $del_find = $this->_db->qurey($sql);            if($del_find){                $result['status'] = 200;                $result['message'] = "删除成功";            }else{                $result['status'] = 500;                $result['message'] = "删除失败";            }        }        return $result;    }        /**     * 添加设计作品图片 处理     * @param $base64_image_content 图片base64     */        public function add_works_images($base64_image_content){            //将base64编码转换为图片保存            if (preg_match('/^(data:\s*image\/(\w+);base64,)/', $base64_image_content, $result)) {                $type = $result[2];                $path = DATA_DIR . '/works/' . date('Ym') . '/';                $new_file = ROOT_PATH . $path;                if (!file_exists($new_file)) {                    //检查是否有该文件夹，如果没有就创建，并给予最高权限                    mkdir($new_file, 0777);                }                $img = time() . ".{$type}";                $new_file = $new_file . $img;                $works = $path . $img;                //将图片保存到指定的位置                if (file_put_contents($new_file, base64_decode(str_replace($result[1], '', $base64_image_content)))) {                    $sql = "INSERT INTO " . $this->_tb_production_img ."( img_url ) VALUE ( $works )";                    if((string)$this->_db->query($sql)){                        return $this->_db->insert_id();                    }else{                        return 0;                    }                }else{                    return 0;                }            }else{                return 0;            }        }        /**         * 举报评论         * @param $comment_id 评论id         * @param $reason   举报原因         * @param $user_id         * @param $type 类型 0 参赛作品         * @return mixed         */        public function report_comment($comment_id,$reason,$user_id,$type){            if(empty($comment_id)&&empty($reason)&&empty($user_id)&&empty($type)){                $result['status'] = 500;                $result['message'] = "参数错误";            }else{                $comment_sql = 'SELECT * FROM '.$this->_tb_diy_comment.' WHERE  `comment_id` = '.$comment_id ;                $comment_data = $this->_db->getRow($comment_sql);                if($comment_data){                    $be_user_id = $comment_data['c_user_id'];                    $content = base64_encode($comment_data['content']);//评论内容                    $record_id = $comment_data['record_id'];                    $add_time = time();                    $report_sql = "INSERT INTO " . $this->_tb_report_comment ." (`type`,`id`,`user_id`,`be_user_id`,`report_reason`,`comment`,`add_time`,`comment_id` ) VALUE ('$type','$record_id','$user_id','$be_user_id','$reason','$content','$add_time','$comment_id')";                    if((string)$this->_db->query($report_sql)){                        $result['status'] = 200;                        $result['message'] = "举报成功";                    }else{                        $result['status'] = 500;                        $result['message'] = "举报失败";                    }                }else{                    $result['status'] = 500;                    $result['message'] = "参数错误";                }            }            return $result;        }        /**         * 添加设计作品封面图 处理         * @param $base64_image_content 图片base64         */        public function add_works_cover($base64_image_content){            //将base64编码转换为图片保存            if (preg_match('/^(data:\s*image\/(\w+);base64,)/', $base64_image_content, $result)) {                $type = $result[2];                $path = DATA_DIR . '/works/' . date('Ym') . '/';                $new_file = ROOT_PATH . $path;                if (!file_exists($new_file)) {                    //检查是否有该文件夹，如果没有就创建，并给予最高权限                    mkdir($new_file, 0777);                }                $img = time() . ".{$type}";                $new_file = $new_file . $img;                $works = $path . $img;    /*            if (strstr($base64_image_content,",")){                    $image = explode(',',$base64_image_content);                    $image = $image[1];                }*/                //return base64_decode($image);                //将图片保存到指定的位置                if (file_put_contents($new_file,base64_decode(str_replace($result[1],'', $base64_image_content)))) {                    return $works;                 }else{                    return 0;                }            }else{                return 0;            }        }        /**         * 我收藏的作品         * @param user_id 收藏人的id         * @param start 起始页         * @param num 一页取多少条         */        public function  product_collect($user_id,$start,$num=12){            if(!empty($user_id)&&$user_id!=0){                $field_str = 'B.find_id,B.user_id,B.title,B.short,B.claim_type,B.production_img,B.content,B.label,B.pc_surface_img,                           B.wap_surface_img,B.good_num,C.user_name,D.name';                $sql = "SELECT ".$field_str." FROM ".                        $this->_tb_product_collect." A LEFT JOIN ".$this->_tb_finds." B ON A.find_id = B.find_id  LEFT JOIN ".                        $this->_tb_user."C ON B.user_id = C.user_id LEFT JOIN ".                        $this->_tb_finds_type."D ON D.type_id = B.production_type WHERE A.user_id='$user_id' Limit $start,$num";                //return $sql;                $result=$this->_db->getAll($sql);                if($result){                    return $result;                }else{                    return 0;                }                return 0;            }        }        /**         * 我收藏的作品数量         * @param user_id 收藏人的id         */        public function  product_collect_count($user_id){                $sql = "SELECT COUNT(*) FROM ".$this->_tb_product_collect." WHERE user_id='$user_id'";                $count=$this->_db->getOne($sql);                return $count;        }        /**         * 点击收藏我的作品         * @param find_id 作品id         * @param user_id 收藏人的id         * @param $table 查询的表         */        public function set_collect($find_id,$user_id){            if(!empty($user_id)&&!empty($find_id)&&$user_id!=0&&$find_id!=0){                //查询是否收藏过                $select_sql = "SELECT `collect_id` FROM ".$this->_tb_product_collect." WHERE user_id='$user_id' AND find_id='$find_id'";                $select_result=$this->_db->getOne($select_sql);                if($select_result){                    return 2;//已收藏                }else{                    //收藏处理                    $addtime=time();                    $sql = "INSERT INTO " .$this->_tb_product_collect."( find_id,user_id,addtime ) VALUE ( $find_id,$user_id,$addtime )";                    $result = (string)$this->_db->query($sql);                    if($result){                        return 1;                    }else{                        return 0;                    }                }            }else{                return 0;            }        }        /**         * 关注用户         * @param integer $user_id    用户id         * @param integer $be_user_id 被关注用户id         */        public function add_user_attention($user_id=0,$be_user_id=0)        {            // 检查是否已经存在于用户的关注列表            if($user_id && $be_user_id){                $sql = "SELECT id from ".$this->_tb_user_attention." where be_user_id = '$be_user_id' AND user_id ='$user_id'";                if($this->_db->getOne($sql)){                    $this->_db->query('DELETE FROM ' . $this->_tb_user_attention . " WHERE be_user_id = '$be_user_id' AND user_id ='$user_id'");                    $result['status'] = 200;                    $result['is_add'] = 0;                    $result['message'] = '已取消关注！';                    return $result;                }else{                    $sql = "INSERT INTO " .$this->_tb_user_attention."( user_id,be_user_id,add_time ) VALUE ( $user_id,$be_user_id,".gmtime()." )";                    if($this->_db->query($sql)){                        $result['status'] = 200;                        $result['is_add'] = 1;                        $result['message'] = '关注成功';                        return $result;                    }                }            }            $result['status'] = 500;            $result['is_add'] = 0;            $result['message'] = '关注失败';            return $result;        }        /**         * 用户名片 弹框         * @param integer $user_id    用户id         *         */        public function user_name_card($user_id=0){            $user_sql = "SELECT `headimg`,`user_name`,`fields` FROM " .$this->_tb_user. " WHERE user_id = '$user_id'";            $row = $this->_db->getRow($user_sql);            $info_data['headimg'] = $row['headimg'];//头像            $info_data['user_name'] = $row['user_name'];//用户名            $info_data['fields'] = ltrim($row['fields'],',');//领域            $attention_sql = "SELECT COUNT(id) FROM ".$this->_tb_user_attention." WHERE user_id ='$user_id'";            $info_data['attention_count'] = $this->_db->getOne($attention_sql);//粉丝数            //T恤作品数 统计在售商品            $shitr_sql = "SELECT COUNT(`goods_id`) FROM ".$this->_tb_goods." WHERE user_id ='$user_id'";            $info_data['shitr_count'] = $this->_db->getOne($shitr_sql);//T恤数            return $info_data;        }    /**     * 检查银行卡是否合法     */    public function get_Bank_Card($card_number){        $check_result = get_bank_card($card_number);        return $check_result;    }    /**     * 第三方银行卡验证接口     */    public function check_Bank_Card($card_number, $real_name = '', $card = ''){        $check_result = check_bank_card($card_number, $real_name, $card);        return $check_result;    }}